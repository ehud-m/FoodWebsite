---
openapi: 3.0.3
info:
  title: Recipe API
  description: This is an API for the recipe website
  contact:
    email: you@your-company.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
# local:
# - url: "http://127.0.0.1:80"
# remote:
- url: https://foodthirteen.cs.bgu.ac.il
  description: SwaggerHub API Auto Mocking
tags:
- name: recipes
  description: Operations for getting and uploading recipes
- name: users
  description: Operations for logging in and registering
paths:
  /recipes/getRandomRecipes:
    get:
      tags:
      - recipes
      summary: this method will generate 3 random recipes.
      description: 3 recipes has been generated.
      operationId: getRandomRecipe
      responses:
        "200":
          description: recipes has been loaded.
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                  - $ref: '#/components/schemas/recipeSummrization'
        "404":
          description: recipe not found - Request failed with status code 404.
  /recipes/getUserRecipes:
    get:
      tags:
      - recipes
      summary: returns an array of recipe summerizations
      description: this method will return either 3 last watched recipes by current user, favorite user recipes or all recipes created by the user, according to the parameter 'type'
      operationId: getUserRecipes
      parameters:
      - name: type
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
          enum:
          - lastWatched
          - favorite
          - created
      responses:
        "200":
          description: recipes has been loaded.
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                  - $ref: '#/components/schemas/recipeSummrization'
        "401":
          description: User not logged-in.
        "402":
          description: Invalid type of operation.
        "404":
          description: recipe not found.
  /recipes/searchRecipe:
    get:
      tags:
      - recipes
      summary: Search a recipe
      description: This method will search a recipe in the db, according to the query specified by the user
      operationId: searchRecipe
      parameters:
      - name: recipeSearchName
        in: query
        description: pass an recipe name to search
        required: true
        style: form
        explode: true
        schema:
          type: string
          example: pasta
      - name: numberOfRecipes
        in: query
        style: form
        explode: true
        schema:
          type: string
          enum:
          - 5
          - 10
          - 15
      - name: cuisine
        in: query
        style: form
        explode: true
        schema:
          type: string
          enum:
          - African
          - American
          - British
          - Cajun
          - Caribbean
          - Chinese
          - Eastern European
          - European
          - French
          - German
          - Greek
          - Indian
          - Irish
          - Italian
          - Japanese
          - Jewish
          - Korean
          - Latin American
          - Mediterranean
          - Mexican
          - Middle Eastern
          - Nordic
          - Southern
          - Spanish
          - Thai
          - Vietnamese
      - name: diet
        in: query
        style: form
        explode: true
        schema:
          type: string
          enum:
          - Gluten Free
          - Ketogenic
          - Vegetarian
          - Lacto-Vegetarian
          - Ovo-Vegetarian
          - Vegan
          - Pescetarian
          - Paleo
          - Primal
          - Low FODMAP
          - Whole30
      - name: intolerances
        in: query
        explode: true
        style: form
        schema:
          type: string
          enum:
          - Dairy
          - Egg
          - Gluten
          - Grain
          - Peanut
          - Seafood
          - Sesame
          - Shellfish
          - Soy
          - Sulfite
          - Tree Nut
          - Wheat
      responses:
        "200":
          description: recipes has been found.
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                  - $ref: '#/components/schemas/recipeSummrization'
        "406":
          description: please send full details
  /recipes/recipe:
    get:
      tags:
      - recipes
      summary: this method will return clicked recipe.
      description: recipe has been returned.
      operationId: getClickedRecipe
      parameters:
      - name: recipeId
        in: query
        description: pass an id of recipe to show
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: found results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
        "401":
          description: User not logged-in.
        "404":
          description: recipe id wasnt found.
        "500":
          description: server error.
    post:
      tags:
      - recipes
      summary: this method will add a recipe to the db.
      operationId: addRecipe
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/addedRecipe'
        required: true
      responses:
        "200":
          description: Recipe was added successfully
        "401":
          description: User not logged-in.
        "403":
          description: couldn't register recipe to db
  /Register:
    post:
      tags:
      - Auth
      summary: this method will add user to the db
      description: By passing in the appropriate options, you can register as a new user.
      operationId: registerUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'
        required: true
      responses:
        "201":
          description: user register was successful
        "403":
          description: user name already exists
        "406":
          description: one of the required details is missing
        "408":
          description: Please log out before.
  /logout:
    post:
      tags:
        - Auth
      summary: logout a user from the system and delete his cookie
      responses:
        "200":
          description: "the user has ben successfully logged out"
  /Login:
    post:
      tags:
      - Auth
      summary: this method will check login details, if it correct the user will get a cookie.
      description: By passing in the appropriate options, you can login as a user.
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/login_body'
        required: true
      responses:
        "200":
          description: user log-in was successful
        "401":
          description: one of the details is incorrect.
        "408":
          description: Please log out before.
  /users/favorites:
     post:
      tags:
      - users
      summary: this method will add to user favorite recipes.
      description: By clicking on the favorite button the recipe will be added to the favories.
      operationId: favorite
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                recipeId:
                  type: string
              required: true
      responses:
        "200":
          description: user log-in was successful
        "401":
          description: one of the details is incorrect.
        "404":
          description: recipe not found.
        "409":
          description: recipe already added to favorites.
  /users/family:
    get:
      tags:
      - users
      summary: returns an array of user family recipes.
      description: this method returns an array of user family recipes.
      operationId: family
      responses:
        "200":
          description: recipes has been loaded.
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                  - $ref: '#/components/schemas/familyRecipe'
        "401":
          description: User not logged-in.
        "500":
          description: server internal error      
components:
  schemas:
    recipeSummrization:
      required:
      - glutenFree
      - id
      - name
      - popularity
      - timeToMake
      - wasSavedByUser
      - wasWatchedByUserBefore
      - whoCanEatVegOrNot
      - image 
      type: object
      properties:
        recipeID:
          type: string
          example: 1234
        name:
          type: string
          example: Pizza
        timeToMake:
          type: integer
          description: minutes to make the recipe
          format: int32
          example: 20
        popularity:
          type: integer
          description: number of likes
          format: int32
          example: 1234
        whoCanEatVegOrNot:
          type: string
          description: Who can eat this meal
          enum:
          - vegetarian
          - vegan
          - meatLovers
        glutenFree:
          description: is the meal gluten free
          type: boolean
        wasWatchedByUserBefore:
          description: was this recipe watched by the user before
          type: boolean
        wasSavedByUser:
          description: was this recipe saved by the user to the favorites
          type: boolean
        image:
          description: holds the image url of the recipe
          type: string
          example: https://my.image 
    recipe:
      required:
      - ingridients
      - instructions
      - numberOfMeals
      type: object
      properties:
        ingridients:
          type: string
          description: ingridients to make the recipe
          example: salt
        instructions:
          type: string
          description: instructions to make the recipe
          example: add salt
        numberOfMeals:
          type: integer
          description: The number of meals that will be created
          format: int32
          example: 1234
    addedRecipe:
      required:
      - name
      - timeToMake
      - popularity
      - whoCanEatVegOrNot
      - glutenFree
      - ingridients
      - instructions
      - numberOfMeals
      - image
      type: object
      properties:
        name: 
          type: string
          example: Pizza
        timeToMake:
          type: string
          description: time to make the recipe
          format: time
          example: 20
        popularity:
          type: string
          description: what is the popularity of the recipe
          example: 20
        whoCanEatVegOrNot:
          type: string
          enum:
          - vegeterian
          - vegan
          - meatLovers
        glutenFree:
          type: boolean
        ingridients:
          type: string
          description: ingridients to make the recipe
          example: salt
        instructions:
          type: string
          description: instructions to make the recipe
          example: add salt
        numberOfMeals:
          type: integer
          description: The number of meals that will be created
          format: int32
          example: 1234
        image:
          type: string
          description: image url
          example: https://my.image
    user:
      type: object
      properties:
        username:
          maxLength: 8
          minLength: 3
          type: string
          description: userName contatins between 3 to 8 letters only
          example: stamuser
          required: true
        firstname:
          type: string
          description: user's first name
          example: stam
          required: true
        lastname:
          type: string
          description: user's last name
          example: lname
          required: true
        country:
          type: string
          description: user's country
          example: Israel
          required: true
        password:
          maxLength: 10
          minLength: 5
          type: string
          description: pasword contatins between 5 to 10 chars, at least one of them is a number and a special char.
          format: password
          example: stam$5
          required: true
        email:
          type: string
          description: user's email
          format: email
          example: stam@test.com
          required: true
        profilePic:
          type: string
          description: URL of the user's image
          format: URL
          example: https://web.com/photo
          required: true
      description: user info
    inline_response_200:
      allOf:
      - $ref: '#/components/schemas/recipeSummrization'
      - $ref: '#/components/schemas/recipe'
    login_body:
      type: object
      properties:
        username:
          type: string
          required: true
        password:
          type: string
          required: true
      example:
        username: yossi
        password: yos@55
    familyRecipe:
      required:
      - dishName
      - dishOwner
      - whenWeMakeIt
      - ingridients
      - instructions
      - username
      - image
      - howManyDishes
      type: object
      properties:
        dishName:
          type: string
          description: dish name
          example: pasta
        dishOwner:
          type: string
          description: who always makes the dish
          example: father
        whenWeMakeIt:
          type: string
          description: when we make the recipe
          example: now
        ingridients:
          type: string
          description: ingridients to make the recipe
          example: salt
        instructions:
          type: string
          description: instructions to make the recipe
          example: add salt
        username:
          type: string
          description: user name
          example: yossi
        image:
          type: string
          description: image path
          example: C:\\here
        howManyDishes:
          type: integer
          description: The number of meals that will be created
          format: int32
          example: 1234
